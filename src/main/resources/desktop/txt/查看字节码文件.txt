javap -c -s -v -l Singleton.class 查看字节码文件
package guide.concurrent;


public class Singleton {

    private volatile static Singleton uniqueInstance;

    private Singleton() {
    }

    public  static Singleton getUniqueInstance() {
        if (uniqueInstance == null) {
            synchronized (Singleton.class) {
                if (uniqueInstance == null) {
                    uniqueInstance = new Singleton();
                }
            }
        }
        return uniqueInstance;
    }


}
javap -c -s -v -l Singleton.class

Classfile /D:/workspace/Demo/src/main/java/guide/concurrent/Singleton.class
  Last modified 2022-1-6; size 517 bytes
  MD5 checksum c5a7f5cea759b5cc6059bf5b0a58fb57
  Compiled from "Singleton.java"
public class guide.concurrent.Singleton
  minor version: 0
  major version: 52
  flags: ACC_PUBLIC, ACC_SUPER
Constant pool:
   #1 = Methodref          #5.#19         // java/lang/Object."<init>":()V
   #2 = Fieldref           #3.#20         // guide/concurrent/Singleton.uniqueInstance:Lguide/concurrent/Singleton;
   #3 = Class              #21            // guide/concurrent/Singleton
   #4 = Methodref          #3.#19         // guide/concurrent/Singleton."<init>":()V
   #5 = Class              #22            // java/lang/Object
   #6 = Utf8               uniqueInstance
   #7 = Utf8               Lguide/concurrent/Singleton;
   #8 = Utf8               <init>
   #9 = Utf8               ()V
  #10 = Utf8               Code
  #11 = Utf8               LineNumberTable
  #12 = Utf8               getUniqueInstance
  #13 = Utf8               ()Lguide/concurrent/Singleton;
  #14 = Utf8               StackMapTable
  #15 = Class              #22            // java/lang/Object
  #16 = Class              #23            // java/lang/Throwable
  #17 = Utf8               SourceFile
  #18 = Utf8               Singleton.java
  #19 = NameAndType        #8:#9          // "<init>":()V
  #20 = NameAndType        #6:#7          // uniqueInstance:Lguide/concurrent/Singleton;
  #21 = Utf8               guide/concurrent/Singleton
  #22 = Utf8               java/lang/Object
  #23 = Utf8               java/lang/Throwable
{
  public static guide.concurrent.Singleton getUniqueInstance();
    descriptor: ()Lguide/concurrent/Singleton;
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=2, args_size=0
         0: getstatic     #2                  // Field uniqueInstance:Lguide/concurrent/Singleton;
         3: ifnonnull     37
         6: ldc           #3                  // class guide/concurrent/Singleton
         8: dup
         9: astore_0
        10: monitorenter
        11: getstatic     #2                  // Field uniqueInstance:Lguide/concurrent/Singleton;
        14: ifnonnull     27
        17: new           #3                  // class guide/concurrent/Singleton
        20: dup
        21: invokespecial #4                  // Method "<init>":()V
        24: putstatic     #2                  // Field uniqueInstance:Lguide/concurrent/Singleton;
        27: aload_0
        28: monitorexit
        29: goto          37
        32: astore_1
        33: aload_0
        34: monitorexit
        35: aload_1
        36: athrow
        37: getstatic     #2                  // Field uniqueInstance:Lguide/concurrent/Singleton;
        40: areturn
      Exception table:
         from    to  target type
            11    29    32   any
            32    35    32   any
      LineNumberTable:
        line 12: 0
        line 13: 6
        line 14: 11
        line 15: 17
        line 17: 27
        line 19: 37
      StackMapTable: number_of_entries = 3
        frame_type = 252 /* append */
          offset_delta = 27
          locals = [ class java/lang/Object ]
        frame_type = 68 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 250 /* chop */
          offset_delta = 4
}
SourceFile: "Singleton.java"
